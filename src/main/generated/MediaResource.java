// generated by com.github.vladislavsevruk:java-class-generator
package ch.srgssr.launch.planning.campaigns;

import java.lang.java.lang.String;

import lombok.Data;
import lombok.experimental.Accessors;

@Accessors(chain = true)
@Data
public class MediaResource {

    private MediaResource hasGeneration;

    private VideoCodec hasVideoCodec;

    private Location hasLocation;

    private MediaResource hasSource;

    private int audioTrackNumber;

    private java.lang.String bitRateMode;

    private java.lang.String videoBitRateMode;

    private MediaResource hasMaster;

    private ColourSpace hasColourSpace;

    private VideoEncodingFormat hasVideoEncodingFormat;

    private MediaResource isMasterOf;

    private MediaFragment hasMediaFragment;

    private Instant dateNormalized;

    private int audioChannelNumber;

    private CaptioningFormat hasCaptioningFormat;

    private Storage_Type hasStorageType;

    private AncillaryDataFormat hasAncillaryDataFormat;

    private MediaResource clonedTo;

    private AudioCodec hasAudioCodec;

    private Format hasFormat;

    private java.lang.String videoEncodingProfile;

    private int numberOfAudioTracks;

    private int regionDelimX;

    private java.lang.String frameHeightUnit;

    private AudioTrack hasAudioTrack;

    private ContainerCodec hasContainerCodec;

    private boolean noiseFilter;

    private int bitRate;

    private MimeType hasContainerMimeType;

    private AudioObject hasRelatedAudioObject;

    private java.lang.String videoEncodingLevel;

    private MediaResource isClonedFrom;

    private MetadataTrack hasMetadataTrack;

    private java.lang.String frameWidthUnit;

    private int videoBitRate;

    private ActiveFormatDescriptorCode displayAspectRatio;

    private AudioEncodingFormat hasAudioEncodingFormat;

    private int sampleRate;

    private double playbackSpeed;

    private DataTrack hasDataTrack;

    private java.lang.String packageName;

    private TimecodeTrack hasTimecodeTrack;

    private int bitRateOverall;

    private java.lang.String audioTrackConfiguration;

    private int bitRateMax;

    private java.lang.String sampleType;

    private Track isTrackPartOf;

    private java.lang.String dimensions;

    private int videoBitRateMax;

    private Agent hasCaptioningSource;

    private double inchesPerSecond;

    private ProductionDevice hasProductionDevice;

    private VideoTrack hasVideoTrack;

    private int frameWidth;

    private Instant dateMigrated;

    private Instant dateDigitised;

    private MediaResource hasParentMediaResource;

    private java.lang.String encodingProfile;

    private MediaResource isRequiredBy;

    private int frameHeight;

    private Essence hasRelatedEssence;

    private EditorialObject instantiates;

    private ContainerEncodingFormat hasContainerEncodingFormat;

    private MediaResource requires;

    private MediaResource isDubbedFrom;

    private Instant dateTransferred;

    private java.lang.String scanningFormat;

    private int iFrameSize;

    private int regionDelimY;

    private java.lang.String audioBitRateMode;

    private ImageFormat hasImageFormat;

    private java.lang.String audioEncodingLevel;

    private MediaResource dubbedTo;

    private int bitDepth;

    private AudioTrack hasRelatedAudioTrack;

    private int audioBitRateMax;

    private int sampleSize;

    private java.lang.String encodingLevel;

    private MediaResource hasSource;

    private Instant dateIngested;

    private SubtitlingFormat hasSubtitlingFormat;

    private Medium hasMedium;

    private MediaResource isClonedFrom;

    private EncodingFormat hasEncodingFormat;

    private long packageByteSize;

    private ImageCodec hasImageCodec;

    private MimeType hasMimeType;

    private java.lang.String audioEncodingProfile;

    private java.lang.String aspectRatio;

    private Codec hasCodec;

    private FileFormat hasFileFormat;

    private int audioBitRate;

    private java.lang.String frameRate;

    private Standard hasStandard;

    private java.lang.String source;

    private java.lang.String hashValue;

    private int numberOfVideoTracks;

    private java.lang.String frameSizeUnit;

    private Track hasTrack;
}
