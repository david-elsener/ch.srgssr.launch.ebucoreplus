// generated by com.github.vladislavsevruk:java-class-generator
package ch.srgssr.launch.production;

import ch.srgssr.launch.editorial.StorageType;
import ch.srgssr.launch.legal.assets.Agent;
import ch.srgssr.launch.legal.assets.EditorialObject;
import ch.srgssr.launch.legal.assets.Instant;
import ch.srgssr.launch.legal.assets.Location;
import ch.srgssr.launch.legal.assets.Resource;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.experimental.Accessors;

/**
 * a Resource that comprises encoded audio, video, graphics, data or text
 *
 *
 * <pre>
 * Examples:
 * - an audio CD
 * - an audio track on a CD
 * - an audio file
 * - a video file
 * - a video DVD
 *
 * </pre>
 */
@Accessors(chain = true)
@Data
@EqualsAndHashCode(callSuper = true)
@ToString(callSuper = true)
public class MediaResource extends Resource {

    /**
     * The maximum video bitrate.
     */
    private int videoBitRateMax;

    /**
     * To link a particular manifestation of an EditorialObject to the corresponding
     * Resource.
     */
    private EditorialObject instantiates;

    /**
     * To establish a relation between a MediaResource and an Essence.
     */
    private Essence relatedEssence;

    /**
     * The encoding profile as defined in specifications.
     */
    private String audioEncodingProfile;

    /**
     * To identify the source of a clone MediaResource
     */
    private MediaResource isClonedFrom;

    /**
     * To identify the master of a Resource
     */
    private MediaResource master;

    /**
     * To define the bottom right corner of a zone on the y-axis. If present with
     * regionDelimX, the zone definition is complemented by the associated values of the height and width.
     */
    private int regionDelimY;

    /**
     * The format of Subtitling.
     */
    private SubtitlingFormat subtitlingFormat;

    /**
     * The format of Captioning.
     */
    private CaptioningFormat captioningFormat;

    /**
     * To specify the aspect ratio.
     */
    private String aspectRatio;

    /**
     * To define the scanning format for a MediaResource. For video, the two main
     * values are "interlaced" or "progressive".
     */
    private String scanningFormat;

    /**
     * An element to identify a part of a track by a title, a start time and an end
     * time in both the media source and media destination.
     */
    private Track isTrackPartOf;

    /**
     * The audio bitrate mode.
     */
    private String audioBitRateMode;

    /**
     * To identify a ProductionDevice associated with a MediaResource.
     */
    private ProductionDevice productionDevice;

    /**
     * Identifies the rate of units against time at which the resource should be
     * played back for human consumption. If the unit of measure is known, use sub-properties framesPerSecond or
     * inchesPerSecond.
     */
    private double playbackSpeed;

    /**
     * the resource have another languageversion
     */
    private MediaResource dubbedTo;

    /**
     * To identify related Audio Objects
     */
    private AudioObject relatedAudioObject;

    /**
     * To specify the codec of an Image.
     */
    private ImageCodec imageCodec;

    /**
     * The configuration of audio tracks contained in the MediaResource.
     */
    private String audioTrackConfiguration;

    /**
     * The audio bitrate.
     */
    private int audioBitRate;

    /**
     * The date when the Resource was ingested/acquired in institutional holdings.
     */
    private Instant dateIngested;

    /**
     * To identify a Codec used to create a resource.
     */
    private Codec codec;

    /**
     * The distance between 2 I-frames also known as the gop size.
     */
    private int iFrameSize;

    /**
     * To identify a container codec.
     */
    private ContainerCodec containerCodec;

    /**
     * To identify the master of a derived media resource.
     */
    private MediaResource isMasterOf;

    /**
     * To provide the overall bitrate at which the MediaResource can be played in
     * bits/second. Current bitrate if constant, and average bitrate if variable.
     */
    private int bitRateOverall;

    /**
     * The encoding level as defined in specifications.
     */
    private String videoEncodingLevel;

    /**
     * Describes the physical dimensions of a MediaResource, with units of measure
     * concatenated to become part of the value.
     */
    private String dimensions;

    /**
     * The width of a video frame.
     */
    private int frameWidth;

    /**
     * The name of a media package in Bytes.
     */
    private String packageName;

    /**
     * To identify AudioTracks in the Resource.
     */
    private AudioTrack audioTrack;

    /**
     * Identifies the inches per second at which an analog audio tape should be
     * played back for human consumption.
     */
    private double inchesPerSecond;

    /**
     * To express strong relations between EditorialObjects
     */
    private MediaResource isRequiredBy;

    /**
     * To describe any encoding format use to produce content.
     */
    private EncodingFormat encodingFormat;

    /**
     * The date when the Resource was copied or converted from an obsolete or
     * endangered original format to a more updated format for preservation.
     */
    private Instant dateMigrated;

    /**
     * The maximum bitrate when variable, in bits per second.
     */
    private int bitRateMax;

    /**
     * The aspect ratio when displayed.
     */
    private ActiveFormatDescriptorCode displayAspectRatio;

    /**
     * The total number of audio tracks contained in the MediaResource.
     */
    private int audioTrackNumber;

    /**
     * To identify the source of a MediaResource.
     */
    private MediaResource source;

    /**
     * To express dependency.
     */
    private MediaResource requires;

    /**
     * To specify the format of an Image.
     */
    private ImageFormat imageFormat;

    /**
     * To describe the colour space.
     */
    private ColourSpace colourSpace;

    /**
     * To specify the Mime type of a Resource.
     */
    private MimeType mimeType;

    /**
     * The size of an audio sample in bits. Also called bit depth.
     */
    private int sampleSize;

    /**
     * The unit used to measure the height of a frame.
     */
    private String frameHeightUnit;

    /**
     * To provide the number of audio tracks.
     */
    private int numberOfAudioTracks;

    /**
     * The date when the Asset was moved from one digital or physical location to
     * another.
     */
    private Instant dateTransferred;

    /**
     * To specify the medium on which the Resource is available.
     */
    private Medium medium;

    /**
     * To identify a video codec
     */
    private VideoCodec videoCodec;

    /**
     * To provide the bitdepth at which the MediaResource has been encoded.
     */
    private int bitDepth;

    /**
     * To define relation to MediaFragments withiin a MediaResource.
     */
    private MediaFragment mediaFragment;

    /**
     * To identify MetadataTracks in the Resource.
     */
    private MetadataTrack metadataTrack;

    /**
     * The max audio bitrate.
     */
    private int audioBitRateMax;

    /**
     * A location assosiated with the object or consept
     */
    private Location location;

    /**
     * To link a MediaResource to a parent.
     */
    private MediaResource parentMediaResource;

    /**
     * Identifies the generation of a version of a resource, i.e. master, edit
     * master, distribution copy, etc.
     */
    private MediaResource generation;

    /**
     * A flag to signal that a noise filter has been used.
     */
    private boolean noiseFilter;

    /**
     * The video bitrate. To provide the bitrate at which the MediaResource can be
     * played in bits/second. Current bitrate if constant, and average bitrate if variable.
     */
    private int videoBitRate;

    /**
     * To identify a timecode track with a MediaResource.
     */
    private TimecodeTrack timecodeTrack;

    /**
     * The encoding profile as defined in specifications.
     */
    private String encodingProfile;

    /**
     * To identify VideoTracks in the Resource.
     */
    private VideoTrack videoTrack;

    /**
     * To provide the Mime type of the Resource.
     */
    private MimeType containerMimeType;

    /**
     * Identifies the technical video standard of a MediaResource, i.e. NTSC or
     * PAL.
     */
    private Standard standard;

    /**
     * The video bitrate mode.
     */
    private String videoBitRateMode;

    /**
     * To identify related Audio Tracks
     */
    private AudioTrack relatedAudioTrack;

    /**
     * The unit used to measure the width of a frame.
     */
    private String frameWidthUnit;

    /**
     * To identify a Resource as the source of another Resource.
     */
    private String source;

    /**
     * Identifies relationship between a digital instantiation of a MediaResource
     * and its direct copy, with no generational loss.
     */
    private MediaResource clonedTo;

    /**
     * To define the top left corner of a zone on the x-axis. If present with
     * regionDelimy, the zone definition is complemented by the associated values of the height and width.
     */
    private int regionDelimX;

    /**
     * The encoding level as defined in specifications.
     */
    private String audioEncodingLevel;

    /**
     * To provide the bitrate at which the MediaResource can be played in
     * bits/second. Current bitrate if constant, and average bitrate if variable.
     */
    private int bitRate;

    /**
     * To associate audio/data/video tracks with a MediaResource.
     */
    private Track track;

    /**
     * To identify DataTracks in the Resource.
     */
    private DataTrack dataTrack;

    /**
     * To identify a Format
     */
    private Format format;

    /**
     * To specify the audio encoding format.
     */
    private AudioEncodingFormat audioEncodingFormat;

    /**
     * The type of audio sample.
     */
    private String sampleType;

    /**
     * the format of ancillary data.
     */
    private AncillaryDataFormat ancillaryDataFormat;

    /**
     * The unit used to express the frame width or height. The unit by default is
     * 'pixel'.
     */
    private String frameSizeUnit;

    /**
     * The total number of audio channels contained in the MediaResource.
     */
    private int audioChannelNumber;

    /**
     * The height of a video frame.
     */
    private int frameHeight;

    /**
     * The date when the Resource was digitised.
     */
    private Instant dateDigitised;

    /**
     * A flag to indicate if the bit rate is fixed or variable.
     */
    private String bitRateMode;

    /**
     * The size of a media package in Bytes.
     */
    private long packageByteSize;

    /**
     * To identify the source of a clone MediaResource
     */
    private MediaResource isClonedFrom;

    /**
     * The hash value associated to a Resource. There are different methods /
     * algorithms to calculate hash values, which can be defined as subproperties.
     */
    private String hValue;

    /**
     * The unit used to express the frame rate of a MediaResource in
     * frames/second.
     */
    private String frameRate;

    /**
     * The format of a file.
     */
    private FileFormat fileFormat;

    /**
     * the origin of a dubbed MediaResource.
     */
    private MediaResource isDubbedFrom;

    /**
     * To identify the audio Codec
     */
    private AudioCodec audioCodec;

    /**
     * The date when the Resource was converted from its original format into a
     * format pre-selected by the institution for preservation.
     */
    private Instant dateNormalized;

    /**
     * To provide information on the source of Captioning.
     */
    private Agent captioningSource;

    /**
     * To provide the number of video tracks.
     */
    private int numberOfVideoTracks;

    /**
     * To define a type of storage associated with a locator from which a Resource
     * can be accessed or can be retrieved.
     */
    private StorageType storageType;

    /**
     * The frequency at which audio is sampled per second. Also called sampling
     * rate.
     */
    private int sampleRate;

    /**
     * To describe the container encoding format.
     */
    private ContainerEncodingFormat containerEncodingFormat;

    /**
     * To specify the video encoding format.
     */
    private VideoEncodingFormat videoEncodingFormat;

    /**
     * To identify the source of a MediaResource.
     */
    private MediaResource source;

    /**
     * The encoding level as defined in specifications.
     */
    private String videoEncodingProfile;

    /**
     * To define an encoding level.
     */
    private String encodingLevel;
}
